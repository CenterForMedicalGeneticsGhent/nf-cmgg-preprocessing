nextflow_workflow {

    name "Test Workflow BAM_QC"
    script "../main.nf"
    workflow "BAM_QC"

    test("test_bam_qc_hsmetrics") {
        when {
            workflow {
                """
                // [meta, bam, bai, roi, fasta, fai, dict]
                input[0] = Channel.of([
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam'       , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai'   , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed'                           , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta'                           , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai'                       , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict'                            , checkIfExists: true),
                ])
                // boolean
                input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success}
            )
        }
    }

    test("test_bam_qc_wgsmetrics") {
        when {
            workflow {
                """
                // [meta, bam, bai, roi, fasta, fai, dict]
                input[0] = Channel.of([
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam'       , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai'   , checkIfExists: true),
                    [],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta'                           , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai'                       , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict'                            , checkIfExists: true),
                ])
                // boolean
                input[1] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success}
            )
        }
    }

    test("test_bam_qc_no_picard") {
        when {
            workflow {
                """
                // [meta, bam, bai, roi, fasta, fai, dict]
                input[0] = Channel.of([
                    [ id:'test', single_end:false ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam'       , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai'   , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed'                           , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta'                           , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai'                       , checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.dict'                            , checkIfExists: true),
                ])
                // boolean
                input[1] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success}
            )
        }
    }
}
