nextflow_workflow {

    name "Test Workflow FASTQ_TO_CRAM"
    script "../main.nf"
    workflow "FASTQ_TO_CRAM"

    test("test_fastq_to_cram_bamsormadup") {
        when {
            workflow {
                """
                // [meta, [fq_1,fq_2], aligner_index]
                input[0] = Channel.of([
                    // meta
                    [
                        id:'test',
                        single_end:false,
                    ],
                    // [fq_1,fq_2]
                    [
                        file('https://github.com/nf-cmgg/test-datasets/blob/main/data/genomics/homo_sapiens/illumina/fastq/test_R1.fastq.gz', checkIfExists: true),
                        file('https://github.com/nf-cmgg/test-datasets/blob/main/data/genomics/homo_sapiens/illumina/fastq/test_R2.fastq.gz', checkIfExists: true)
                    ],
                    // aligner index
                    file('https://github.com/nf-cmgg/test-datasets/tree/main/data/genomics/homo_sapiens/genome/bwa',checkIfExists:true),
                ])
                // aligner
                input[1] = "bwamem"
                // markdup
                input[2] = "biobambam"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success}
            )
        }
    }

    test("test_fastq_to_cram_sormadup") {
        when {
            workflow {
                """
                input[0] = Channel.of([
                    // meta
                    [
                        id:'test',
                        single_end:false,
                    ],
                    // [fq_1,fq_2]
                    [
                        file('https://github.com/nf-cmgg/test-datasets/blob/main/data/genomics/homo_sapiens/illumina/fastq/test_R1.fastq.gz', checkIfExists: true),
                        file('https://github.com/nf-cmgg/test-datasets/blob/main/data/genomics/homo_sapiens/illumina/fastq/test_R2.fastq.gz', checkIfExists: true)
                    ],
                    // aligner index
                    file('https://github.com/nf-cmgg/test-datasets/tree/main/data/genomics/homo_sapiens/genome/bwa',checkIfExists:true),
                ])
                // aligner
                input[1] = "bwamem"
                // markdup
                input[2] = "samtools"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success}
            )
        }
    }

    test("test_fastq_to_cram_multisort") {
        when {
            workflow {
                """
                input[0] = Channel.of([
                    // meta
                    [
                        id:'test',
                        single_end:false,
                    ],
                    // [fq_1,fq_2]
                    [
                        file('https://github.com/nf-cmgg/test-datasets/blob/main/data/genomics/homo_sapiens/illumina/fastq/test_R1.fastq.gz', checkIfExists: true),
                        file('https://github.com/nf-cmgg/test-datasets/blob/main/data/genomics/homo_sapiens/illumina/fastq/test_R2.fastq.gz', checkIfExists: true)
                    ],
                    // aligner index
                    file('https://github.com/nf-cmgg/test-datasets/tree/main/data/genomics/homo_sapiens/genome/bwa',checkIfExists:true),
                ])
                // aligner
                input[1] = "bwamem"
                // markdup
                input[2] = "false"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success}
            )
        }
    }
}
