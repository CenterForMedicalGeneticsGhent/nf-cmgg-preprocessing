nextflow_workflow {

    name "Test Workflow BAM_ARCHIVE"
    script "subworkflows/local/bam_archive/main.nf"
    workflow "BAM_ARCHIVE"

    test("bam_archive bam") {
        when {
            workflow {
                """
                // ch_bam_bai [meta, bam, bai]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.of([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                ])
                """
            }
        }

        then {
            assert workflow.success
            with (workflow.out.cram_crai) {
                assert size() == 1
                with (get(0)) {
                    // [meta, cram, crai]
                    assert size() == 3

                    // cram
                    assert get(1) ==~ ".*.cram"
                    // checksum is variable
                    //assert path(get(1)).md5 == "1bfd161b203a549c16ef47c5e81d8386"

                    // crai
                    assert get(2)==~ ".*.cram.crai"
                    // checksum is variable
                   //assert path(get(2)).md5 == "02ec0342aa390a3a1af92f370e076ea8"
                }
            }
            with (workflow.out.checksum) {
                assert size() == 1
                with (get(0)) {
                    // [meta, checksum]
                    assert size() == 2
                    // checksum
                    assert get(1) ==~ ".*.cram.md5"
                }
            }
        }
    }
}
