nextflow_workflow {

    name "Test Workflow FASTQ_TO_CRAM"
    script "subworkflows/local/fastq_to_cram/main.nf"
    workflow "FASTQ_TO_CRAM"

    test("fastq_to_cram bwamem") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                // ch_fastq [meta, [fastq, fastq]]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true),
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.value([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                ])

                // aligner
                input[2] = 'bwamem'
                // aligner_index
                input[3] = Channel.of(file(params.genomes['GRCh38']['bwamem2'], checkIfExists: true),)
                """
            }
        }

        then {
            assert workflow.success
        }

    }

    test("fastq_to_cram bwamem2 no_index") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                // ch_fastq [meta, [fastq, fastq]]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true),
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.value([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                ])

                // aligner
                input[2] = 'bwamem'

                // aligner_index
                input[3] = Channel.empty()
                """
            }
        }

        then {
            assert workflow.success
        }

    }

}
