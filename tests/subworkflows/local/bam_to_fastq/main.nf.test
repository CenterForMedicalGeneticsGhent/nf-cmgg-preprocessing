nextflow_workflow {

    name "Test Workflow BAM_TO_FASTQ"
    script "subworkflows/local/bam_to_fastq/main.nf"
    workflow "BAM_TO_FASTQ"

    test("bam_to_fastq bam") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                // ch_bam [meta, bam]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.value([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                ])
                """
            }
        }

        then {
            // workflow finished successfully
            assert workflow.success
            // check number of processes executed
            assert workflow.trace.succeeded().size() == 2

        }
    }

    test("bam_to_fastq cram") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                // ch_bam [meta, bam]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                ])
                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.value([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                ])
                """
            }
        }

        then {
            // workflow finished successfully
            assert workflow.success
            // check number of processes executed
            assert workflow.trace.succeeded().size() == 2
        }
    }
}
