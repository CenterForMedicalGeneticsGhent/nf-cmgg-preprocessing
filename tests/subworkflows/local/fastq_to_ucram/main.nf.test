nextflow_workflow {

    name "Test Workflow FASTQ_TO_UCRAM"
    script "subworkflows/local/fastq_to_ucram/main.nf"
    workflow "FASTQ_TO_UCRAM"

    test("fastq_to_ucram") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                // ch_fastq_per_sample [meta, [fastq, fastq]]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.value([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ])
                """
            }
        }

        then {
            assert workflow.success
            with (workflow.out.cram_crai) {
                assert size() == 1
                with (get(0)) {
                    // [meta, cram, crai]
                    assert size() == 3
                    // cram
                    assert get(1) ==~ ".*.cram"
                    assert path(get(1)).md5 == "578e1af51e59d328419d54ec8f472a14"
                    // crai
                    assert get(2)==~ ".*.cram.crai"
                    assert path(get(2)).md5 == "df307eb013c1de936df86f6937227801"
                }
            }
            with (workflow.out.checksum) {
                assert size() == 1
                with (get(0)) {
                    // [meta, checksum]
                    assert size() == 2
                    // checksum
                    assert get(1) ==~ ".*.cram.md5"
                }
            }
        }
    }

}
