nextflow_workflow {

    name "Test Workflow COVERAGE"
    script "subworkflows/local/coverage/main.nf"
    workflow "COVERAGE"

    test("COVERAGE - No target interval file") {

        when {
            params {
                run_coverage = true
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                // ch_bam_bai [meta, bam, bai]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_cram_index'], checkIfExists: true)
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.of([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_gz'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_gz_fai'], checkIfExists: true)
                ])

                // Target interval file
                input[2] = []

                // Panel beds
                input[3] = Channel.empty()
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("COVERAGE - Target interval file") {

        when {
            params {
                run_coverage = true
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                // ch_bam_bai [meta, bam, bai]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_cram_index'], checkIfExists: true)
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.of([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_gz'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_gz_fai'], checkIfExists: true)
                ])

                // Target interval file
                input[2] = Channel.of( file(params.test_data['homo_sapiens']['illumina']['roi_bed'], checkIfExists: true))

                // Panel beds
                input[3] = Channel.empty()
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
