nextflow_workflow {

    name "Test Workflow BAM_QC"
    script "subworkflows/local/bam_qc/main.nf"
    workflow "BAM_QC"

    test("QC - No Picard") {

        when {
            params {
                disable_picard_metrics = true
            }
            workflow {
                """
                // ch_bam_bai
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_cram_index'], checkIfExists: true)
                ])

                // ch_fasta_fai
                input[1] = Channel.of([
                    [id:'genome'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                    ])

                // ch_fasta_dict
                input[2] = Channel.of([
                    [id:'genome'],
                    file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true),
                    ])

                // ch_target_interval
                input[3] = Channel.fromPath(params.test_data['homo_sapiens']['illumina']['roi_bed'])

                // ch_bait_interval
                input[4] = Channel.fromPath(params.test_data['homo_sapiens']['illumina']['roi_bed'])

                // disable_picard
                input[5] = params.disable_picard_metrics
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("QC - Picard HS metrics") {

        when {
            params {
                disable_picard_metrics = false
            }
            workflow {
                """
                // ch_bam_bai
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_cram_index'], checkIfExists: true)
                ])

                // ch_fasta_fai
                input[1] = Channel.of([
                    [id:'genome'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                    ])

                // ch_fasta_dict
                input[2] = Channel.of([
                    [id:'genome'],
                    file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true),
                    ])

                // ch_target_interval
                input[3] = Channel.fromPath(params.test_data['homo_sapiens']['illumina']['roi_bed'])

                // ch_bait_interval
                input[4] = Channel.fromPath(params.test_data['homo_sapiens']['illumina']['roi_bed'])

                // disable_picard
                input[5] = params.disable_picard_metrics
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("QC - Picard WGS metrics") {

        when {
            params {
                disable_picard_metrics = false
            }
            workflow {
                """
                // ch_bam_bai
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_cram_index'], checkIfExists: true)
                ])

                // ch_fasta_fai
                input[1] = Channel.of([
                    [id:'genome'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                    ])

                // ch_fasta_dict
                input[2] = Channel.of([
                    [id:'genome'],
                    file(params.test_data['homo_sapiens']['genome']['genome_dict'], checkIfExists: true),
                    ])

                // ch_target_interval
                input[3] = Channel.value([])

                // ch_bait_interval
                input[4] = Channel.value([])

                // disable_picard
                input[5] = params.disable_picard_metrics
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
