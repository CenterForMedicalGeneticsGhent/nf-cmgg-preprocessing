nextflow_workflow {

    name "Test Workflow BAM_QC"
    script "subworkflows/local/bam_qc/main.nf"
    workflow "BAM_QC"

    test("bam_qc bam") {

        when {
            params {
                disable_picard_qc = false
            }
            workflow {
                """
                // ch_bam_bai [meta, bam, bai]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                ])

                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.of([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                ])
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() == 4
            assert workflow.out.metrics.size() == 13
        }
    }

    test("bam_qc cram") {

        when {
            params {
                disable_picard_qc = false
            }
            workflow {
                """
                // ch_bam_bai [meta, bam, bai]
                input[0] = Channel.of([
                    [id: 'test', single_end: false],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true),
                ])
                // ch_fasta_fai [meta2, fasta, fai]
                input[1] = Channel.of([
                    [id: 'homo_sapiens'],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true),
                ])
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() == 4
            assert workflow.out.metrics.size() == 13
        }
    }
}
