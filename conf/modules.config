/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // Default values
    publishDir = [
        path: { meta.samplename ? "${params.outdir}/${meta.samplename}" : "${params.outdir}"},
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
    ]

    //********************************************************************************//
    // DEMULTIPLEX AND TRIMMING
    //********************************************************************************//

    withName: UNTAR {
        cpus = 1
        publishDir = [ enabled: false ]
    }

    withName: BCLCONVERT {
        cpus   = { check_max( 18    , "cpus"   ) }
        memory = { check_max( 144.GB, "memory" ) }
        ext.args = {[
            meta.lane ? "--bcl-only-lane ${meta.lane}" : "",
            "--force"
        ].join(" ").trim()}
        publishDir = [
            [
                // Gather and write InterOp files
                path: { "${params.outdir}/InterOp" },
                mode: params.publish_dir_mode,
                overwrite: true,
                pattern: "**.bin",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Fetch RunInfo.xml
                path: { meta.lane ? "${params.outdir}/Reports/L00${meta.lane}" : "${params.outdir}/Reports/" },
                mode: params.publish_dir_mode,
                pattern: "RunInfo.xml",
                overwrite: true,
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Gather and write Reports
                path: { meta.lane ? "${params.outdir}/Reports/L00${meta.lane}" : "${params.outdir}/Reports/" },
                mode: params.publish_dir_mode,
                pattern: "Reports",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Gather and write Logs
                path: { meta.lane ? "${params.outdir}/Logs/L00${meta.lane}" : "${params.outdir}/Logs/" },
                mode: params.publish_dir_mode,
                pattern: "Logs",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // don't write the fastq's
                pattern: "**.fastq.gz",
                enabled: false
            ]
        ]
    }

    withName: FASTP {
        ext.args = {[
            "--detect_adapter_for_pe",
            params.aligner != "snapaligner" &&  meta.single_end && reads.size() > 5000000000                ? "--split_by_lines 200000000": "",
            params.aligner != "snapaligner" && !meta.single_end && reads.any{ f -> f.size() > 5000000000 } ? "--split_by_lines 200000000": "",
            params.skip_trimming                                        ? "-A" : "",
            params.trim_front   > 0                                     ? "--trim_front1 ${params.trim_front}" : "",
            params.trim_tail    > 0                                     ? "--trim_tail1  ${params.trim_tail}" : "",
            params.adapter_R1                                           ? "--adapter_sequence ${params.adapter_R1}" : "",
            params.adapter_R2                                           ? "--adapter_sequence ${params.adapter_R2}" : "",
        ].join(" ").trim()}
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json}"
            ],
        ]
    }

    //********************************************************************************//
    // FASTQ CONVERSION
    //********************************************************************************//

    withName: CAT_FASTQ {
        publishDir = [ enabled: false ]
    }

    withName: FGBIO_FASTQTOBAM {
        ext.args = {[
            "--read-group-id ${meta.readgroup.ID}",
            "--sample ${meta.readgroup.SM}",
            "--library ${meta.readgroup.LB}",
            "--platform-unit ${meta.readgroup.PU}",
            "--platform ${meta.readgroup.PL}",
            "--sequencing-center ${meta.readgroup.CN}",
            "--sort=true"
        ].join(" ").trim()}
        publishDir = [ enabled: false ]
    }

    //********************************************************************************//
    // ALIGNMENT
    //********************************************************************************//

    // Readgroup
    // Example:
    // @RG\tID:220614_A00785_0484_AH5W5GDRX2.1\tCN:CMGG\tPU:220614_A00785_0484_AH5W5GDRX2.1.GCACCACC-ATCAGTAC\tPL:ILLUMINA\tLB:CNV_LI_2022_084\tSM:I2200090
    // ID : flowcell.lane
    // CN : sequencing center; CMGG
    // PU : flowcell.lane.index
    // PL : platform; ILLUMINA
    // LB : library prep
    // SM : samplename

    withName: BOWTIE2_ALIGN {
        cpus   = { check_max( 9    , "cpus"   ) }
        memory = { check_max( 18.GB, "memory" ) }
        time   = { check_max( 4.h  , "time"   ) }
        ext.when = {params.aligner == "bowtie2"}
        ext.args = {[
            "--local",
            "--fast-local",
            meta.readgroup ? "--rg-id ${meta.readgroup.ID}": "",
            meta.readgroup ? "--rg " + meta.readgroup.collect{ k,v -> return "$k:$v" }.join(" --rg ") : ""
        ].join(" ").trim()}
        publishDir = [ enabled: false ]
    }

    withName: BWAMEM1_MEM {
        ext.when = {params.aligner == "bwa"}
        ext.args = {[
            "-K 100000000",
            "-p",
            "-v 3",
            "-Y",
            "-c 250",
            "-C",
            meta.readgroup ? "-R \"@RG\\t" + meta.readgroup.collect{ "$it.key:$it.value" }.join("\\t") + "\"" : ""
        ].join(" ").trim()}
        publishDir = [ enabled: false ]
    }

    // -b-    : Don't lock threads to cpu cores, improves performance when scheduling multiple jobs/node
    // -sm 10 : Allow 10GB of memory for sorting threads

    withName: SNAP_ALIGN {
        cpus   = { check_max( meta.tag && meta.tag == "WGS" ? 36 : 18 , "cpus" ) }
        memory = { check_max( meta.tag && meta.tag == "WGS" ? 252.GB : 126.GB , "memory" ) }
        ext.when = {params.aligner == "snapaligner"}
        ext.args = {[
            "-so",
            "-b-",
            "-sm 10",
            meta.readgroup ? "-R \"@RG\\t" + meta.readgroup.collect{ "$it.key:$it.value" }.join("\\t") + "\"" : ""
        ].join(" ").trim()}
        publishDir = [ enabled: false ]
    }

    //********************************************************************************//
    // BAMPROCESSING
    //********************************************************************************//

    withName: BIOBAMBAM_BAMSORMADUP {
        ext.prefix = {"${meta.id}.merged"}
        ext.args = {[
            "indexfilename=${meta.id}.merged.bam.bai",
            "optminpixeldif=2500"
        ].join(" ").trim()}
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*metrics*",
                saveAs: {filename -> filename.replace("metrics", "duplicate_metrics")}
            ],
        ]
    }

    //********************************************************************************//
    // COVERAGE
    //********************************************************************************//

    withName: ".*:COVERAGE:.*" {
        ext.when = {params.run_coverage}
    }

    withName: MOSDEPTH {
        cpus = 4
        ext.args = [
            "--no-per-base",
            "--fast-mode" ,
            "--quantize 0:1:4:100:200:"
        ].join(" ").trim()
    }

    //********************************************************************************//
    // BAM_ARCHIVE
    //********************************************************************************//

    withName: SAMTOOLS_CONVERT {
        // activate cram compression
        ext.args = "-C --output-fmt-option archive"
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ],
        ]
    }

    withName: MD5SUM {
        cpus = 1
        memory = 1.GB
    }

    //********************************************************************************//
    // QC
    //********************************************************************************//

    withName: ".*:BAM_QC:.*" {
        cpus = 1
    }

    withName: ".*:PICARD_.*" {
        ext.when = {!params.disable_picard_qc}
    }

    withName: "PICARD_COLLECTWGSMETRICS" {
        cpus = 1
        ext.args = "--USE_FAST_ALGORITHM true"
    }

    withName: "PICARD_COLLECTHSMETRICS" {
        cpus = 1
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cpus = 1
        memory = 1.GB
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: "*_versions.yml"
        ]
    }

    withName: MULTIQC {
        cpus = 1
        memory = 4.GB
    }

}
